// Event contains all event-specific things
event
	// The name of the network the message was sent on.
	// If this is changed, the message will be transferred to the other network immediately after this script.
	<Get|Set>Network() string

	// The name of the channel the message was sent to.
	<Get|Set>Channel() string

	// The timestamp of the message.
	<Get|Set>Timestamp() int64

	// The plain nick of the user who sent the message.
	<Get|Set>Sender() string

	// The command used (e.g. privmsg, action, join..)
	<Get|Set>Command() string

	// The message.
	<Get|Set>Message() string

	// Whether or not the message is from the mauIRC user.
	<Is|Set>OwnMsg() bool

	// Whether or not the message has been cancelled by a plugin.
	<Is|Set>Cancelled() bool

	// Module that contains methods to modify the preview of the URLs in the message.
	preview module
		// Check whether or not the message has a preview currently attached.
		HasPreview() bool

		// Remove the attached preview.
		RemovePreview()

		// Load a preview of the given URL and if successful, set it as the preview.
		//
		// Return: Whether or not the URL had valid preview data
		SetPreviewURL(url string) bool

		// Change the preview to show the given image.
		//
		// @param url: The direct URL to the image to show
		// @param typ: The MIME type of the image (possibly optional)
		SetPreviewImage(url, typ string)

		// Change the title, description and site name of the preview.
		//
		// @param title: The title for the preview
		// @param description: The description. If this is the same as title, it will be ignored
		// @param sitename: The name (usually a simplified URL) of the site
		SetPreviewText(title, description, sitename string)

// Network contains all network-specific things (channels, IRC connection, etc...)
network module
	// Get the current nickname of the user.
	GetNick()

	// Get the topic of the given channel
	//
	// @param channel: The name of the channel to get the topic of
	// @return: The topic of the channel, or an empty string if channel not found
	GetTopic(channel string) string

	// Get the name of channels the user is in.
	GetChannels() []string

	// Get a list of all channels, including those that the user is not in.
	GetAllChannels() []string

	// Emulate a message send event.
	// This will invoke the exact same function that is invoked when the client actually sends a message.
	// All global and network-specific scripts will be run as normal.
	//
	// @param channel: The name of the channel to send the message to
	// @param command: The command (e.g. privmsg, action, join..)
	// @param message: The message
	SendFakeMessage(channel string, command string, message string)

	// Emulate a message receive event.
	// This will invoke the exact same function that is invoked when a message is received from the IRC server.
	// All global and network-specific scripts will be run as normal.
	//
	// @param channel: The name of the channel the message was received on
	// @param sender: The user who sent the message
	// @param command: The command (e.g. privmsg, action, join..)
	// @param message: The message
	ReceiveFakeMessage(channel string, sender string, command string, message string)

	// IRC contains all bindings for running IRC commands. Function names are usually the IRC command in lowercase with
	// the first letter uppercased.
	irc module
		// Change the users nickname
		Nick(nick string)
		// Join the given channel and use the given password (can be empty)
		Join(channel string, password string)
		// Part the given channel with the given reason
		Part(channel string, reason string)
		// Set the topic of the given channel to the given topic
		Topic(channel string, topic string)
		// Send the given message to the given channel (or user)
		Privmsg(channel string, message string)

// User contains all user-specific things (send messages to client, etc...)
user module
	// Get the email of the user
	GetEmail() string
	// Send a message to the client and store it in the database, so the client will see the message even after a reload.
	//
	// @param network: The name of the network to send the message to
	// @param channel: The name of the channel to send the message to
	// @param timestamp: The amount of seconds from EPOCH when the message was sent
	// @param sender: The name of the user who sent the message
	// @param command: The command used (e.g. privmsg, action, join..)
	// @param message: The message
	// @param ownmsg: Whether or not the message was sent by the user
	SendMessage(network string, channel string, timestamp int64, sender string, command string, message string, ownmsg bool)
	// Send a message directly to the client; don't store it anywhere.
	//
	// @param id: The ID of the message. On normal messages, this is an automatically incrementing always unique ID.
	//            With SendDirectMessage the value doesn't affect anything permanently, since the message will not be
	//            stored in the database.
	// @param network: The name of the network to send the message to
	// @param channel: The name of the channel to send the message to
	// @param timestamp: The amount of seconds from EPOCH when the message was sent
	// @param sender: The name of the user who sent the message
	// @param command: The command used (e.g. privmsg, action, join..)
	// @param message: The message
	// @param ownmsg: Whether or not the message was sent by the user
	SendDirectMessage(id int64, network string, channel string, timestamp int64, sender string, command string, message string, ownmsg bool)
	// Send a raw JSON message to the client.
	//
	// @param typ: The type of the message (e.g. message, action, clear..)
	// @param data: The raw JSON data to send
	SendRawMessage(typ string, data string)
	// Get a list of the networks the user is connected to.
	GetNetworks() []string
